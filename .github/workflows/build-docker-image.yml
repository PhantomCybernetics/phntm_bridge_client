name: Build Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: phantomcybernetics/phntm_bridge_client

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            ros_distro: rolling
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            ros_distro: rolling
            runner: ubuntu-24.04-arm
            platform: linux/arm64

          - arch: amd64
            ros_distro: kilted
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            ros_distro: kilted
            runner: ubuntu-24.04-arm
            platform: linux/arm64

          - arch: amd64
            ros_distro: jazzy
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            ros_distro: jazzy
            runner: ubuntu-24.04-arm
            platform: linux/arm64

          - arch: amd64
            ros_distro: iron
            runner: ubuntu-latest
            platform: linux/amd64
          - arch: arm64
            ros_distro: iron
            runner: ubuntu-24.04-arm
            platform: linux/arm64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Generate image name
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ros_distro }}-${{ matrix.arch }}-${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ matrix.platform }}
        build-args: |
          ROS_DISTRO=${{ matrix.ros_distro }}
        push: true
        tags: ${{ steps.image.outputs.image }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.arch }}-${{ matrix.ros_distro }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}-${{ matrix.ros_distro }}

  push-multi-arch-manifest:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        ros_distro: [rolling, kilted, jazzy, iron]

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Check successful builds
      id: check_builds
      run: |
        # Check which architectures were successfully built for this ROS distro
        SUCCESSFUL_ARCHS=""
        
        # Check if amd64 build was successful for this ROS distro
        if docker manifest inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ros_distro }}-amd64-${{ github.sha }}" > /dev/null 2>&1; then
          SUCCESSFUL_ARCHS="$SUCCESSFUL_ARCHS amd64"
        fi
        
        # Check if arm64 build was successful for this ROS distro
        if docker manifest inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ros_distro }}-arm64-${{ github.sha }}" > /dev/null 2>&1; then
          SUCCESSFUL_ARCHS="$SUCCESSFUL_ARCHS arm64"
        fi
        
        echo "successful_archs=$SUCCESSFUL_ARCHS" >> $GITHUB_OUTPUT
        echo "has_successful_builds=$([ -n "$SUCCESSFUL_ARCHS" ] && echo true || echo false)" >> $GITHUB_OUTPUT

    - name: Create and push multi-arch manifest
      if: false && steps.check_builds.outputs.has_successful_builds == 'true'
      run: |
        # Create multi-arch manifest for each tag
        for tag in ${{ steps.meta.outputs.tags }}; do
          # Skip if tag doesn't match current ROS distro
          if [[ "$tag" != *"${{ matrix.ros_distro }}"* ]] && [[ "$tag" != *"latest"* ]] && [[ "$tag" != *"main"* ]]; then
            continue
          fi

          # Build the list of successful images for this manifest
          IMAGES=""
          for arch in ${{ steps.check_builds.outputs.successful_archs }}; do
            IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.ros_distro }}-${arch}-${{ github.sha }}"
          done

          if [ -n "$IMAGES" ]; then
            echo "Creating manifest for $tag with images: $IMAGES"
            docker buildx imagetools create --tag "$tag" $IMAGES
          fi
        done
